var HMACObj=function(){"use strict";class t extends Error{constructor(t){super(t),this.name="PermissionError"}}const e=async(t,e,s="raw",i=!1)=>await globalThis.crypto.subtle.importKey(s,t,{name:"HMAC",hash:{name:e}},i,["sign","verify"]),s=async(t,e=!1)=>await globalThis.crypto.subtle.generateKey({name:"HMAC",hash:{name:t}},e,["sign","verify"]),i=async(e,s="raw")=>{if(!e.extractable)throw new t("Key exports are not allowed. You can permit this during key-generation.");return await globalThis.crypto.subtle.exportKey(s,e)},r=async(t,e)=>await globalThis.crypto.subtle.sign({name:"HMAC",hash:e.algorithm.hash.name},e,t),n=async(t,e,s)=>await globalThis.crypto.subtle.verify("HMAC",s,e,t),o=(t,e)=>{if(!t)throw new TypeError("Missing required parameter 'digestmod'.");let s=0|[].concat(String(t).match(/[0-9]+/)).at(0);if(t=`SHA-${s}`,!e.includes(t))throw new TypeError(`Available digestmod are: '${e.join(", ")}'.`);return 1===s&&(s=160),[t,s]};class a{static toBytes(t){return ArrayBuffer.isView(t)&&(t=t.buffer),[new Uint8Array(t),!1,"bytes"]}}class h{static get typeList(){return["buffer","bytes","uint8","view"]}static getType(t){if(!h.typeList.includes(t))throw new TypeError(`Unknown output type: '${t}'`);return t}static compile(t,e){let s;return s="buffer"===(e=h.getType(e))?t.buffer:"view"===e?new DataView(t.buffer):t,s}}class l{static makeDataView(t){const e=new ArrayBuffer(t);return new DataView(e)}static floatingPoints(t,e=!1){const s=this.makeDataView(8);return s.setFloat64(0,t,e),s}static numbers(t,e=!1){let s,i;if(Number.isInteger(t)){if(i="int",!Number.isSafeInteger(t)){let e,s,i;throw t<0?(e=Number.MIN_SAFE_INTEGER,s="smaller",i="MIN"):(e=Number.MAX_SAFE_INTEGER,s="bigger",i="MAX"),new RangeError(`The provided integer is ${s} than ${i}_SAFE_INTEGER: '${e}'\nData integrity is not guaranteed. Use a BigInt to avoid this issue.\n(If you see this error although a float was provided, the input has to many digits before the decimal point to store the decimal places in a float with 64 bits.)`)}t<0?t<-2147483648?(s=this.makeDataView(8),s.setBigInt64(0,BigInt(t),e)):t<-32768?(s=this.makeDataView(4),s.setInt32(0,t,e)):(s=this.makeDataView(2),s.setInt16(0,t,e)):t>0?t>4294967295?(s=this.makeDataView(8),s.setBigUint64(0,BigInt(t),e)):t>65535?(s=this.makeDataView(4),s.setUint32(0,t,e)):(s=this.makeDataView(2),s.setInt16(0,t,e)):s=new Uint16Array([0])}else i="float",s=this.floatingPoints(t,e);return[new Uint8Array(s.buffer),i]}static bigInts(t,e=!1){const s=new Array,i=e?"push":"unshift",r=18446744073709551616n;if(t<0)for(;t<-9223372036854775808n;)s[i](t%r),t>>=64n;else for(;t>=r;)s[i](t%r),t>>=64n;s[i](t);const n=8*s.length,o=this.makeDataView(n);return s.forEach(((t,s)=>{const i=8*s;o.setBigUint64(i,t,e)})),new Uint8Array(o.buffer)}static toBytes(t,e){let s,i=!1,r="bytes";if(t instanceof ArrayBuffer)s=new Uint8Array(t.slice());else if(ArrayBuffer.isView(t))s=new Uint8Array(t.buffer.slice());else if("string"==typeof t||t instanceof String)s=(new TextEncoder).encode(t);else if("number"==typeof t){if(isNaN(t))throw new TypeError("Cannot proceed. Input is NaN.");if(t==1/0)throw new TypeError("Cannot proceed. Input is Infinity.");if(e.signed&&t<0&&(i=!0,t=-t),e.numberMode){const i=this.floatingPoints(t,e.littleEndian);s=new Uint8Array(i.buffer),r="float"}else[s,r]=this.numbers(t,e.littleEndian)}else if("bigint"==typeof t)e.signed&&t<0&&(i=!0,t*=-1n),s=this.bigInts(t,e.littleEndian),r="int";else{if(!Array.isArray(t))throw new TypeError("The provided input type can not be processed.");{const i=new Array;for(const s of t)i.push(...this.toBytes(s,e)[0]);s=Uint8Array.from(i)}}return[s,i,r]}}class c{static get typeList(){return["bigint64","bigint_n","biguint64","buffer","bytes","float32","float64","float_n","int8","int16","int32","int_n","str","uint8","uint16","uint32","uint_n","view"]}static getType(t){if(!this.typeList.includes(t))throw new TypeError(`Unknown output type: '${t}'`);return t}static makeTypedArrayBuffer(t,e,s,i){const r=t.byteLength,n=(e-t.byteLength%e)%e,o=i&&r>1?255:0;let a=t;if(n){a=new Uint8Array(r+n),a.fill(o);const e=s?0:n;a.set(t,e)}return a.buffer}static makeTypedArray(t,e,s,i){let r;if("int16"===e||"uint16"===e){const n=this.makeTypedArrayBuffer(t,2,s,i);r="int16"===e?new Int16Array(n):new Uint16Array(n)}else if("int32"===e||"uint32"===e||"float32"===e){const n=this.makeTypedArrayBuffer(t,4,s,i);r="int32"===e?new Int32Array(n):"uint32"===e?new Uint32Array(n):new Float32Array(n)}else if("bigint64"===e||"biguint64"===e||"float64"===e){const n=this.makeTypedArrayBuffer(t,8,s,i);r="bigint64"===e?new BigInt64Array(n):"biguint64"===e?new BigUint64Array(n):new Float64Array(n)}return r}static compile(t,e,s=!1,i=!1){let r;if(e=this.getType(e),i){let i;if(i=e.match(/^float/)?-this.compile(t,"float_n",s):-this.compile(t,"uint_n",s),"float_n"===e)return i;t=l.toBytes(i,{littleEndian:s,numberMode:!1,signed:!1})[0]}if("buffer"===e)r=t.buffer;else if("bytes"===e||"uint8"===e)r=t;else if("int8"===e)r=new Int8Array(t.buffer);else if("view"===e)r=new DataView(t.buffer);else if("str"===e)r=(new TextDecoder).decode(t);else if("uint_n"===e||"int_n"===e||"bigint_n"===e){if(1===t.length){const e=this.makeTypedArrayBuffer(t,2,s,i);t=new Uint8Array(e)}s&&t.reverse();let n=0n;t.forEach((t=>n=(n<<8n)+BigInt(t))),"uint_n"!==e&&(n=BigInt.asIntN(8*t.length,n)),r="bigint_n"!==e&&n>=Number.MIN_SAFE_INTEGER&&n<=Number.MAX_SAFE_INTEGER?Number(n):n}else if("float_n"===e)if(t.length<=4){let e;e=4===t.length?t:this.makeTypedArray(t,"float32",!1,i);r=new DataView(e.buffer).getFloat32(0,s)}else{if(!(t.length<=8))throw new RangeError("The provided input is to complex to be converted into a floating point.");{let e;e=8===t.length?t:this.makeTypedArray(t,"float64",!1,i);r=new DataView(e.buffer).getFloat64(0,s)}}else if("number"===e){if(8!==t.length)throw new TypeError("Type mismatch. Cannot convert into number.");const e=new Float64Array(t.buffer);r=Number(e)}else r=this.makeTypedArray(t,e,s,i);return r}}const u=l,d=c;class f extends TypeError{constructor(){super("The input is signed but the converter is not set to treat input as signed.\nYou can pass the string 'signed' to the decode function or when constructing the converter."),this.name="SignError"}}class p extends TypeError{constructor(t,e=null){null===e&&(e=`Character '${t}' is not part of the charset.`),super(e),this.name="DecodingError"}}class g{constructor(t){this.root=t,this.converterArgs={},this.#t()}setIOHandlers(t=u,e=d){this.inputHandler=t,this.outputHandler=e}#t(){this.root.addCharset=(t,e,s=[],i=!0)=>{const r=(t,s,i)=>{if(0===i&&s.length)return console.warn(`This converter has no ${t}. The following argument was ignored:\n'${s}'`),[];let r=i;if("string"==typeof s&&(s=[...s]),Array.isArray(s))r=s.length,s=new Set(s);else if(!(s instanceof Set))throw new TypeError(`The ${t} must be one of the types:\n'str', 'set', 'array'."`);if(s.size===i)return[...s];if(r!==i)throw new Error(`Your ${t} has a length of ${r}. The converter requires a length of ${i}.`);{const s={};(e=[...e]).forEach((t=>{t in s?s[t]++:s[t]=1}));let r="";i<100&&(r=`${e.join("")}\n`,e.forEach((t=>{s[t]>1?r+="^":r+=" "})));const n=Object.keys(s).filter((t=>s[t]>1));throw new Error(`You have repetitive char(s) [ ${n.join(" | ")} ] in your ${t}. Make sure each character is unique.\n${r}`)}};if(this.root.frozenCharsets)throw new Error("The charsets of this converter cannot be changed.");if("string"!=typeof t)throw new TypeError("The charset name must be a string.");i&&t in this.root.charsets&&console.warn(`An existing charset with name ${t} will get replaced.`);const n=r("charset",e,this.root.converter.radix),o=r("padding set",s,this.root.padCharAmount);this.root.charsets[t]=n,o.length&&(this.root.padChars[t]=o),i&&console.info(`New charset '${t}' was added and is ready to use`)},this.root.setDefaultCharset=t=>{if(!(t in this.root.charsets)){const e=Object.keys(this.root.charsets).join("\n   * ");throw new TypeError(`Charset ${t} was not found. Available charsets are:\n   * ${e}`)}this.root.version=t}}#e(t){return t.map((t=>`'${t}'`)).join(", ")}toSignedStr(t,e){return t=t.replace(/^0+(?!$)/,""),e&&(t="-".concat(t)),t}extractSign(t){let e=!1;return"-"===t[0]&&(e=!0,t=t.slice(1)),[t,e]}#s(t,e,s,i){throw new TypeError([`'${t}'\n\nParameters:`,i?"\n * valid declarations for IO handlers are 'bytesOnly', 'bytesIn', 'bytesOut'":"",this.root.isMutable.signed?"\n * pass 'signed' to disable, 'unsigned' to enable the use of the twos's complement for negative integers":"",this.root.isMutable.littleEndian?"\n * 'be' for big , 'le' for little endian byte order for case conversion":"",this.root.isMutable.padding?"\n * pass 'pad' to fill up, 'nopad' to not fill up the output with the particular padding":"",this.root.isMutable.upper?"\n * valid args for changing the encoded output case are 'upper' and 'lower'":"",`\n * valid args for the output type are ${this.#e(s)}`,e?`\n * the option(s) for version/charset are: ${this.#e(e)}`:"","\n * valid args for integrity check are: 'integrity' and 'nointegrity'",this.root.hasDecimalMode?"\n * 'decimal' for decimal-mode (directly converts Numbers including decimal values, without byte-conversion)":"","\n * 'number' for number-mode (converts every number into a Float64Array to keep the natural js number type)",Object.keys(this.converterArgs).length?`\n * converter specific args:\n   - ${(()=>Object.keys(this.converterArgs).map((t=>this.converterArgs[t].map((t=>`'${t}'`)).join(" and "))).join("\n   - "))()}`:"","\n\nTraceback:"].join(""))}validateArgs(t,e=!1){const s={decimalMode:this.root.decimalMode,integrity:this.root.integrity,littleEndian:this.root.littleEndian,numberMode:this.root.numberMode,options:this.root.options,outputType:this.root.outputType,padding:this.root.padding,signed:this.root.signed,upper:this.root.upper,version:this.root.version};for(const t in this.converterArgs)s[t]=this.root[t];if(!t.length)return e&&this.setIOHandlers(),s;const i=e=>!!t.includes(e)&&(t.splice(t.indexOf(e),1),!0),r=Object.keys(this.root.charsets),n={integrity:["nointegrity","integrity"],littleEndian:["be","le"],padding:["nopad","pad"],signed:["unsigned","signed"],upper:["lower","upper"],...this.converterArgs};if(e)if(i("bytes_only"))this.setIOHandlers(a,h);else{const t=i("bytes_in")?a:u,e=i("bytes_out")?h:d;this.setIOHandlers(t,e)}const o=this.outputHandler.typeList;if(i("number")&&(s.numberMode=!0,s.outputType="float_n"),i("decimal")){if(!this.root.hasDecimalMode)throw TypeError("Argument 'decimal' is only allowed for converters with a non-integer base.");s.decimalMode=!0,s.outputType="decimal",s.numberMode&&(s.numberMode=!1,console.warn("-> number-mode was disabled due to the decimal-mode"))}if(t.forEach((t=>{if("object"!=typeof t)if(t=String(t).toLowerCase(),r.includes(t))s.version=t;else if(o.includes(t))s.outputType=t;else{let i=!0;for(const e in n)if(n[e].includes(t)){if(i=!1,!this.root.isMutable[e])throw TypeError(`Argument '${t}' is not allowed for this type of converter.`);s[e]=Boolean(n[e].indexOf(t))}i&&this.#s(t,r,o,e)}else s.options={...s.options,...t}})),s.padding&&s.signed&&(s.padding=!1,console.warn("-> padding was set to false due to the signed conversion")),e)for(const t in s)this.root[t]=s[t];return s}signError(){throw new f}wrapOutput(t,e=0){if(!e)return t;const s=new RegExp(`.{1,${e}}`,"gu");return t.match(s).join("\n")}normalizeInput(t,e=!1){return e?String(t):String(t).replace(/\s/g,"")}}class y{constructor(t,e=null,s=null,i=0){this.radix=t,null!==e&&null!==s?(this.bsEnc=e,this.bsDec=s):[this.bsEnc,this.bsDec]=this.constructor.guessBS(t),this.decPadVal=i}static guessBS(t){let e=t<8?t:Math.ceil(256/t);for(;e>8&&!(e%8);)e/=8;let s=0;for(;8*s*Math.log(2)/Math.log(t)<e;)s++;return[s,Math.ceil(8*s*Math.log(2)/Math.log(t))]}encode(t,e,s=!1,i=null){let r=this.bsEnc;0===r&&(r=t.byteLength);let n="";const o=r?(r-t.length%r)%r:0,a=new Array(o).fill(0);let h;if(s?(t.reverse(),h=[...a,...t]):h=[...t,...a],10===this.radix){let t=0n;for(let e=0;e<r;e++)t=(t<<8n)+BigInt(h[e]);return[t.toString(),0]}for(let t=0,s=h.length;t<s;t+=r){let s=0n;for(let e=t;e<t+r;e++)s=(s<<8n)+BigInt(h[e]);const a=new Array;let l,c=s;for(;c>=this.radix;)[c,l]=this.divmod(c,this.radix),a.unshift(parseInt(l,10));for(a.unshift(parseInt(c,10));a.length<this.bsDec;)a.unshift(0);let u="";a.forEach((t=>u=u.concat(e[t]))),i&&(u=i(u,o)),n=n.concat(u)}return[n,o]}decode(t,e,s=[],i=!0,r=!1){if(!t)return new Uint8Array(0);let n=this.bsDec;const o=new Array;let a;if([...t].forEach((t=>{const r=e.indexOf(t);if(r>-1)o.push(r);else if(i&&-1===s.indexOf(t))throw new p(t)})),0===n)n=o.length;else{a=(n-o.length%n)%n;const t=new Array(a).fill(this.decPadVal);r?o.unshift(...t):o.push(...t)}let h=new Array;for(let t=0,e=o.length;t<e;t+=n){let e=0n;for(let s=0;s<n;s++)e+=BigInt(o[t+s])*this.pow(n-1-s);const s=new Array;let i,r=e;for(;r>=256;)[r,i]=this.divmod(r,256),s.unshift(parseInt(i,10));for(s.unshift(parseInt(r,10));s.length<this.bsEnc;)s.unshift(0);h=h.concat(s)}if(r){if(h.length>1){for(;!h[0];)h.shift();h.length||h.push(0),h.reverse()}}else if(this.bsDec){const t=this.padChars(a);h.splice(h.length-t)}return Uint8Array.from(h)}padBytes(t){return Math.floor(t*this.bsDec/this.bsEnc)}padChars(t){return Math.ceil(t*this.bsEnc/this.bsDec)}pow(t){return BigInt(this.radix)**BigInt(t)}divmod(t,e){return[t,e]=[BigInt(t),BigInt(e)],[t/e,t%e]}}class w{constructor(t=!0){this.charsets={},this.decimalMode=!1,this.frozenCharsets=!1,this.hasDecimalMode=!1,this.hasSignedMode=!1,this.integrity=!0,this.littleEndian=!1,this.numberMode=!1,this.outputType="buffer",this.padding=!1,this.padCharAmount=0,this.padChars={},this.signed=!1,this.upper=null,t&&(this.utils=new g(this)),this.version="default",this.options={lineWrap:0},this.isMutable={integrity:!0,littleEndian:!1,padding:!1,signed:!1,upper:!1}}encode(t,e,s,...i){const r=this.utils.validateArgs(i);let[n,o,a]=this.utils.inputHandler.toBytes(t,r),h=null;e&&(h=e(r));let[l,c]=this.converter.encode(n,this.charsets[r.version],r.littleEndian,h);return r.signed&&(l=this.utils.toSignedStr(l,o)),r.upper&&(l=l.toUpperCase()),s&&(l=s({inputBytes:n,output:l,settings:r,zeroPadding:c,type:a})),this.utils.wrapOutput(l,r.options.lineWrap)}decode(t,e,s,i,...r){const n=this.utils.validateArgs(r);t=this.utils.normalizeInput(t,i);let o=!1;this.hasSignedMode&&([t,o]=this.utils.extractSign(t),o&&!n.signed&&this.utils.signError()),this.isMutable.upper&&(t=t.toLowerCase()),e&&(t=e({input:t,settings:n}));let a=this.converter.decode(t,this.charsets[n.version],this.padChars[n.version],n.integrity,n.littleEndian);return s&&(a=s({input:t,output:a,settings:n})),this.utils.outputHandler.compile(a,n.outputType,n.littleEndian,o)}}class b extends w{constructor(...t){super(),this.charsets.all=[..." !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"],this.charsets.sequence=[..."Hello World!"],this.charsets.default=["1"],this.charsets.tmark=["|","#"],this.converter=new y(10,0,0),this.hasSignedMode=!0,this.littleEndian=!0,this.signed=!0,this.isMutable.charsets=!1,this.isMutable.signed=!0,this.isMutable.upper=!0,this.utils.validateArgs(t,!0)}encode(t,...e){const s=this.utils.validateArgs(e);let i,r;[i,r]=this.utils.inputHandler.toBytes(t,s);let n=this.converter.encode(i,null,s.littleEndian)[0],o=BigInt(n);if(o>Number.MAX_SAFE_INTEGER)throw new RangeError("Invalid string length.");o>16777216&&console.warn("The string length is really long. The JavaScript engine may have memory issues generating the output string."),o=Number(o);const a=this.charsets[s.version],h=a.length;let l="";if(1===h)l=a.at(0).repeat(o);else if("all"===s.version)for(let t=0;t<o;t++){l+=a[Math.floor(Math.random()*h)]}else if("tmark"===s.version){const t=o%5;o>4&&(l=a.at(1).repeat((o-t)/5)),l+=a.at(0).repeat(t)}else for(let t=0;t<o;t++)l+=a[t%h];return l=this.utils.toSignedStr(l,r),s.upper&&(l=l.toUpperCase()),this.utils.wrapOutput(l,s.options.lineWrap)}decode(t,...e){const s=this.utils.validateArgs(e);let i;if(t=this.utils.normalizeInput(t),[t,i]=this.utils.extractSign(t),"all"!==s.version){const e=[...new Set(this.charsets[s.version])].join(""),i=new RegExp(`[^${e}]`,"g");t=t.replace(i,"")}t=String(t.length);const r=this.converter.decode(t,[..."0123456789"],[],"",s.integrity,s.littleEndian);return this.utils.outputHandler.compile(r,s.outputType,s.littleEndian,i)}}class m extends w{constructor(...t){super(),this.converter=new y(16,1,2),this.charsets.default=[..."0123456789abcdef"],this.padChars.default=[],this.hasSignedMode=!0,this.isMutable.signed=!0,this.isMutable.upper=!0,this.utils.validateArgs(t,!0)}encode(t,...e){return super.encode(t,null,null,...e)}decode(t,...e){return super.decode(t,(({input:t,settings:e})=>(t=t.replace(/^0x/,""),e.integrity||(t=t.toLowerCase().replace(/[^0-9a-f]/g,"")),t.length%2&&(t="0".concat(t)),t)),null,!1,...e)}}class v extends w{constructor(...t){super(),this.converter=new y(32,5,8),this.charsets.crockford=[..."0123456789abcdefghjkmnpqrstvwxyz"],this.padChars.crockford=["="],this.charsets.rfc3548=[..."abcdefghijklmnopqrstuvwxyz234567"],this.padChars.rfc3548=["="],this.charsets.rfc4648=[..."0123456789abcdefghijklmnopqrstuv"],this.padChars.rfc4648=["="],this.charsets.zbase32=[..."ybndrfg8ejkmcpqxot1uwisza345h769"],this.padChars.zbase32=["="],this.padCharAmount=1,this.hasSignedMode=!0,this.version="rfc4648",this.isMutable.littleEndian=!0,this.isMutable.padding=!0,this.isMutable.signed=!0,this.isMutable.upper=!0,this.utils.validateArgs(t,!0),this.padding=/rfc3548|rfc4648/.test(this.version),this.upper="crockford"===this.version}encode(t,...e){return super.encode(t,null,(({output:t,settings:e,zeroPadding:s})=>{if(!e.littleEndian&&s){const i=this.converter.padBytes(s),r=this.padChars[e.version].at(0);t=t.slice(0,-i),e.padding&&(t=t.concat(r.repeat(i)))}return t}),...e)}decode(t,...e){return super.decode(t,null,null,!1,...e)}}class E extends w{constructor(...t){super(),this.converter=new y(58,0,0),this.charsets.default=[..."123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"],Object.defineProperty(this.padChars,"default",{get:()=>[this.charsets.default.at(0)]}),this.charsets.bitcoin=[..."123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"],Object.defineProperty(this.padChars,"bitcoin",{get:()=>[this.charsets.bitcoin.at(0)]}),this.charsets.flickr=[..."123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"],Object.defineProperty(this.padChars,"flickr",{get:()=>[this.charsets.flickr.at(0)]}),this.padding=!0,this.version="bitcoin",this.isMutable.padding=!0,this.isMutable.signed=!0,this.utils.validateArgs(t,!0)}encode(t,...e){return super.encode(t,null,(({inputBytes:t,output:e,settings:s,type:i})=>{if(s.padding&&"int"!==i){let i=0;const r=t.length,n=this.charsets[s.version].at(0);if(r){for(;!t[i];)if(i++,i===r){i=0;break}const s=i;s&&(e=n.repeat(s).concat(e))}}return e}),...e)}decode(t,...e){return super.decode(t,null,(({input:t,output:e,settings:s})=>{const i=this.charsets[s.version].at(0);if(s.padding&&t.length>1){let s=0;for(;t[s]===i;)s++;const r=s;r&&(e=Uint8Array.from([...new Array(r).fill(0),...e]))}return e}),!1,...e)}}class A extends w{constructor(...t){super(),this.converter=new y(64,3,4),this.charsets.default=[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"],this.padChars.default=["="],this.charsets.urlsafe=this.charsets.default.slice(0,-2).concat(["-","_"]),this.padChars.urlsafe=["="],this.padCharAmount=1,this.padding=!0,this.isMutable.padding=!0,this.utils.validateArgs(t,!0)}encode(t,...e){return super.encode(t,null,(({output:t,settings:e,zeroPadding:s})=>{if(s){const i=this.converter.padBytes(s),r=this.padChars[e.version].at(0);t=t.slice(0,-i),e.padding&&(t=t.concat(r.repeat(i)))}return t}),...e)}decode(t,...e){return super.decode(t,null,null,!1,...e)}}class x extends w{constructor(...t){super(),this.converter=new y(64,3,4),this.charsets.default=[..."`!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_"],Object.defineProperty(this.padChars,"default",{get:()=>[this.charsets.default.at(0)]}),this.charsets.original=[" ",...this.charsets.default.slice(1)],Object.defineProperty(this.padChars,"original",{get:()=>[this.charsets.original.at(0)]}),this.charsets.xx=[..."+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"],Object.defineProperty(this.padChars,"xx",{get:()=>[this.charsets.xx.at(0)]}),this.padding=!0,this.header=!1,this.utils.converterArgs.header=["noheader","header"],this.isMutable.header=!0,this.isMutable.integrity=!1,this.utils.validateArgs(t,!0)}encode(t,...e){return super.encode(t,null,(({output:t,settings:e,zeroPadding:s})=>{const i=this.charsets[e.version],r=[...t];if(e.header){t=`begin ${e.options.permissions||T()} ${e.options.file||k()}\n`}else t="";for(;;){const e=r.splice(0,60);if(!r.length){const r=this.converter.padChars(e.length)-s;t+=`${i.at(r)}${e.join("")}\n`;break}t+=`${i.at(45)}${e.join("")}\n`}return t+=`${i.at(0)}\n`,e.header&&(t+="\nend"),t}),...e)}decode(t,...e){let s=0;return super.decode(t,(({input:t,settings:e})=>{const i=this.charsets[e.version],r=t.trim().split("\n"),n=[];/^begin/i.test(r.at(0))&&r.shift();for(const t of r){const e=[...t],r=i.indexOf(e.shift());if(!(r>0))break;if(n.push(...e),45!==r){s=this.converter.padChars(e.length)-r;break}}return n.join("")}),(({output:t})=>(s&&(t=new Uint8Array(t.slice(0,-s))),t)),!0,...e)}}const T=()=>{const t=()=>Math.floor(8*Math.random());return`${t()}${t()}${t()}`},k=()=>{const t=t=>t.at(Math.floor(Math.random()*t.length));return`${t(["unchronological","unconditionally","underemphasized","underprivileged","undistinguished","unsophisticated","untitled","untitled-1","untitled-3","uuencode"])}.${t(["applescript","bat","beam","bin","exe","js","mam","py","sh","vdo","wiz"])}`};class M extends w{constructor(...t){super(),this.converter=new y(85,4,5,84),this.charsets.adobe=[..."!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu"],this.charsets.ascii85=this.charsets.adobe.slice(),this.charsets.rfc1924=[..."0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~"],this.charsets.z85=[..."0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-:+=^!/*?&<>()[]{}@%$#"],this.version="ascii85",this.utils.validateArgs(t,!0)}encode(t,...e){return super.encode(t,(t=>{let e;return t.version.match(/adobe|ascii85/)&&(e=(t,e)=>e||"!!!!!"!==t?t:"z"),e}),(({output:t,settings:e,zeroPadding:s})=>{if(s){const e=this.converter.padBytes(s);t=t.slice(0,-e)}return"adobe"===e.version&&(t=`<~${t}~>`),t}),...e)}decode(t,...e){return super.decode(t,(({input:t,settings:e})=>(e.version.match(/adobe|ascii85/)&&(t=t.replace(/z/g,"!!!!!"),"adobe"===e.version&&(t=t.replace(/^<~|~>$/g,""))),t)),null,!1,...e)}}class C extends w{constructor(...t){super(),this.converter={radix:91,bsEnc:0,bsDec:0},this.charsets.default=[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&()*+,./:;<=>?@[]^_`{|}~"'],this.version="default",this.utils.validateArgs(t,!0)}encode(t,...e){const s=this.utils.validateArgs(e),i=this.utils.inputHandler.toBytes(t,s)[0];let r=0,n=0,o="";const a=this.charsets[s.version];if(i.forEach((t=>{if(n+=t<<r,r+=8,r>13){let t,e,s=13,i=n%8192;i<89&&(s=14,i=n%16384),n>>=s,r-=s,[t,e]=this.#i(i,91),o=`${o}${a[e]}${a[t]}`}})),r){let t,e;[t,e]=this.#i(n,91),o=o.concat(a[e]),(r>7||n>90)&&(o=o.concat(a[t]))}return this.utils.wrapOutput(o,s.options.lineWrap)}decode(t,...e){const s=this.utils.validateArgs(e),i=this.charsets[s.version];t=this.utils.normalizeInput(t);let r=[...t];s.integrity||(r=r.filter((t=>i.includes(t))));let n=r.length,o=!1;n%2&&(o=!0,n--);let a=0,h=0;const l=new Array;for(let t=0;t<n;t+=2){const e=i.indexOf(r[t]),s=i.indexOf(r[t+1]);if(e<0)throw new p(r[t]);if(s<0)throw new p(r[t+1]);const n=e+91*s;a=(n<<h)+a,h+=n%8192>88?13:14;do{l.push(a%256),a>>=8,h-=8}while(h>7)}if(o){const t=r.at(n),e=i.indexOf(t);l.push(((e<<h)+a)%256)}const c=Uint8Array.from(l);return this.utils.outputHandler.compile(c,s.outputType)}#i(t,e){return[Math.floor(t/e),t%e]}}class j extends w{constructor(...t){super(),this.converter=new y(10,0,0),this.hexlify=new y(16,1,2),this.charsets.default="<placeholder>",this.charsets.hex="<placeholder>",this.version="default",this.frozenCharsets=!0,this.littleEndian=!0,this.hasSignedMode=!0,this.isMutable.signed=!0,this.utils.validateArgs(t,!0)}encode(t,...e){const s=this.utils.validateArgs(e),i=s.signed;s.signed=!0;const[r,n]=this.utils.inputHandler.toBytes(t,s);let o=this.converter.encode(r,null,s.littleEndian)[0],a=BigInt(o),h=new Array;if(n){if(!i)throw new TypeError("Negative values in unsigned mode are invalid.");a=-a}if(i)for(;;){const t=Number(127n&a);if(a>>=7n,0==a&&0==(64&t)||-1==a&&0!=(64&t)){h.push(t);break}h.push(128|t)}else for(;;){const t=Number(127n&a);if(a>>=7n,0==a){h.push(t);break}h.push(128|t)}const l=Uint8Array.from(h);return"hex"===s.version?this.hexlify.encode(l,[..."0123456789abcdef"],!1)[0]:l}decode(t,...e){const s=this.utils.validateArgs(e);if("hex"===s.version)t=this.hexlify.decode(this.utils.normalizeInput(t).toLowerCase(),[..."0123456789abcdef"],[],s.integrity,!1);else{if(void 0===t.byteLength)throw new TypeError("Input must be a bytes like object.");t=a.toBytes(t)[0]}if(1===t.length&&!t[0])return this.utils.outputHandler.compile(new Uint8Array(1),s.outputType,!0);t=Array.from(t);let i,r,n,o=0n,h=-7n;for(i of t)h+=7n,o+=BigInt(127&i)<<h;s.signed&&0!=(64&i)&&(o|=-(1n<<h+7n)),[r,n]=this.utils.extractSign(o.toString());const l=this.converter.decode(r,[..."0123456789"],[],s.integrity,!0);return this.utils.outputHandler.compile(l,s.outputType,!0,n)}}class B extends w{#r={};#n=null;constructor(...t){super(),this.charsets.emojis_v1=[..."🀄🃏🅰🅱🅾🅿🆎🆑🆒🆓🆔🆕🆖🆗🆘🆙🆚🇦🇧🇨🇩🇪🇫🇬🇭🇮🇯🇰🇱🇲🇳🇴🇵🇶🇷🇸🇹🇺🇻🇼🇽🇾🇿🈁🈂🈚🈯🈲🈳🈴🈵🈶🈷🈸🈹🈺🉐🉑🌀🌁🌂🌃🌄🌅🌆🌇🌈🌉🌊🌋🌌🌍🌎🌏🌐🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜🌝🌞🌟🌠🌡🌤🌥🌦🌧🌨🌩🌪🌫🌬🌭🌮🌯🌰🌱🌲🌳🌴🌵🌶🌷🌸🌹🌺🌻🌼🌽🌾🌿🍀🍁🍂🍃🍄🍅🍆🍇🍈🍉🍊🍋🍌🍍🍎🍏🍐🍑🍒🍓🍔🍕🍖🍗🍘🍙🍚🍛🍜🍝🍞🍟🍠🍡🍢🍣🍤🍥🍦🍧🍨🍩🍪🍫🍬🍭🍮🍯🍰🍱🍲🍳🍴🍵🍶🍷🍸🍹🍺🍻🍼🍽🍾🍿🎀🎁🎂🎃🎄🎅🎆🎇🎈🎉🎊🎋🎌🎍🎎🎏🎐🎑🎒🎓🎖🎗🎙🎚🎛🎞🎟🎠🎡🎢🎣🎤🎥🎦🎧🎨🎩🎪🎫🎬🎭🎮🎯🎰🎱🎲🎳🎴🎵🎶🎷🎸🎹🎺🎻🎼🎽🎾🎿🏀🏁🏂🏃🏄🏅🏆🏇🏈🏉🏊🏋🏌🏎🏏🏐🏑🏒🏓🏔🏕🏖🏗🏘🏙🏚🏛🏜🏝🏞🏟🏠🏡🏢🏣🏤🏥🏦🏧🏨🏩🏪🏫🏬🏭🏮🏯🏰🏳🏴🏵🏷🏸🏹🏺🏻🏼🏽🏾🏿🐀🐁🐂🐃🐄🐅🐆🐇🐈🐉🐊🐋🐌🐍🐎🐏🐐🐑🐒🐓🐔🐕🐖🐗🐘🐙🐚🐛🐜🐝🐞🐟🐠🐡🐢🐣🐤🐥🐦🐧🐨🐩🐪🐫🐬🐭🐮🐯🐰🐱🐲🐳🐴🐵🐶🐷🐸🐹🐺🐻🐼🐽🐾🐿👀👁👂👃👄👅👆👇👈👉👊👋👌👍👎👏👐👑👒👓👔👕👖👗👘👙👚👛👜👝👞👟👠👡👢👣👤👥👦👧👨👩👪👫👬👭👮👯👰👱👲👳👴👵👶👷👸👹👺👻👼👽👾👿💀💁💂💃💄💅💆💇💈💉💊💋💌💍💎💏💐💑💒💓💔💕💖💗💘💙💚💛💜💝💞💟💠💡💢💣💤💥💦💧💨💩💪💫💬💭💮💯💰💱💲💳💴💵💶💷💸💹💺💻💼💽💾💿📀📁📂📃📄📅📆📇📈📉📊📋📌📍📎📏📐📒📓📔📕📖📗📘📙📚📛📜📝📞📟📠📡📢📣📤📥📦📧📨📩📪📫📬📭📮📯📰📱📲📳📴📵📶📷📸📹📺📻📼📽📿🔀🔁🔂🔃🔄🔅🔆🔇🔈🔉🔊🔋🔌🔍🔎🔏🔐🔑🔒🔓🔔🔕🔖🔗🔘🔙🔚🔛🔜🔝🔞🔟🔠🔡🔢🔣🔤🔥🔦🔧🔨🔩🔪🔫🔬🔭🔮🔯🔰🔱🔲🔳🔴🔵🔶🔷🔸🔹🔺🔻🔼🔽🕉🕊🕋🕌🕍🕎🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚🕛🕜🕝🕞🕟🕠🕡🕢🕣🕤🕥🕦🕧🕯🕰🕳🕴🕵🕶🕷🕸🕹🕺🖇🖊🖋🖌🖍🖐🖕🖖🖤🖥🖨🖱🖲🖼🗂🗃🗄🗑🗒🗓🗜🗝🗞🗡🗣🗨🗯🗳🗺🗻🗼🗽🗾🗿😀😁😂😃😄😅😆😇😈😉😊😋😌😍😎😏😐😑😒😓😔😕😖😗😘😙😚😛😜😝😞😟😠😡😢😣😤😥😦😧😨😩😪😫😬😭😮😯😰😱😲😳😴😵😶😷😸😹😺😻😼😽😾😿🙀🙁🙂🙃🙄🙅🙆🙇🙈🙉🙊🙌🙍🙎🙏🚀🚁🚂🚃🚄🚅🚆🚇🚈🚉🚊🚋🚌🚍🚎🚏🚐🚑🚒🚓🚔🚕🚖🚗🚘🚙🚚🚛🚜🚝🚞🚟🚠🚡🚢🚣🚤🚥🚦🚧🚨🚩🚪🚫🚬🚭🚮🚯🚰🚱🚲🚳🚴🚵🚶🚷🚸🚹🚺🚻🚼🚽🚾🚿🛀🛁🛂🛃🛄🛅🛋🛌🛍🛎🛏🛐🛑🛒🛠🛡🛢🛣🛤🛥🛩🛫🛬🛰🛳🛴🛵🛶🛷🛸🛹🤐🤑🤒🤓🤔🤕🤖🤗🤘🤙🤚🤛🤜🤝🤞🤟🤠🤡🤢🤣🤤🤥🤦🤧🤨🤩🤪🤫🤬🤭🤮🤯🤰🤱🤲🤳🤴🤵🤶🤷🤸🤹🤺🤼🤽🤾🥀🥁🥂🥃🥄🥅🥇🥈🥉🥊🥋🥌🥍🥎🥏🥐🥑🥒🥓🥔🥕🥖🥗🥘🥙🥚🥛🥜🥝🥞🥟🥠🥡🥢🥣🥤🥥🥦🥧🥨🥩🥪🥫🥬🥭🥮🥯🥰🥳🥴🥵🥶🥺🥼🥽🥾🥿🦀🦁🦂🦃🦄🦅🦆🦇🦈🦉🦊🦋🦌🦍🦎🦏🦐🦑🦒🦓🦔🦕🦖🦗🦘🦙🦚🦛🦜🦝🦞🦟🦠🦡🦢🦰🦱🦲🦳🦴🦵🦶🦷🦸🦹🧀🧁🧂🧐🧑🧒🧓🧔🧕"],this.padChars.emojis_v1=["⚜","🏍","📑","🙋","☕"],this.charsets.emojis_v2=[..."🀄🃏⏰⏳☔♈♉♊♋♌♍♎♏♐♑♒♓♿⚓⚡⚽⚾⛄⛅⛎⛔⛪⛲⛳⛵⛺⛽✊✋✨⭐🛕🛖🛗🛝🛞🛟🛺🈁🛻🤌🤏🤿🥱🥲🥸🥹🥻🦣🦤🦥🦦🦧🌀🌁🌂🌃🌄🌅🌆🌇🌈🌉🌊🌋🌌🌍🌎🌏🌐🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜🌝🌞🌟🌠🦨🦩🦪🦫🦬🦭🦮🦯🦺🦻🌭🌮🌯🌰🌱🌲🌳🌴🌵🦼🌷🌸🌹🌺🌻🌼🌽🌾🌿🍀🍁🍂🍃🍄🍅🍆🍇🍈🍉🍊🍋🍌🍍🍎🍏🍐🍑🍒🍓🍔🍕🍖🍗🍘🍙🍚🍛🍜🍝🍞🍟🍠🍡🍢🍣🍤🍥🍦🍧🍨🍩🍪🍫🍬🍭🍮🍯🍰🍱🍲🍳🍴🍵🍶🍷🍸🍹🍺🍻🍼🦽🍾🍿🎀🎁🎂🎃🎄🎅🎆🎇🎈🎉🎊🎋🎌🎍🎎🎏🎐🎑🎒🎓🦾🦿🧃🧄🧅🧆🧇🎠🎡🎢🎣🎤🎥🧈🎧🎨🎩🎪🎫🎬🎭🎮🎯🎰🎱🎲🎳🎴🎵🎶🎷🎸🎹🎺🎻🎼🎽🎾🎿🏀🏁🏂🏃🏄🏅🏆🏇🏈🏉🏊🧉🧊🧋🏏🏐🏑🏒🏓🧌🧍🧎🧏🧖🧗🧘🧙🧚🧛🧜🧝🏠🏡🏢🏣🏤🏥🏦🧞🏨🏩🏪🏫🏬🏭🏮🏯🏰🧟🏴🧠🧢🏸🏹🏺🧣🧤🧥🧦🧧🐀🐁🐂🐃🐄🐅🐆🐇🐈🐉🐊🐋🐌🐍🐎🐏🐐🐑🐒🐓🐔🐕🐖🐗🐘🐙🐚🐛🐜🐝🐞🐟🐠🐡🐢🐣🐤🐥🐦🐧🐨🐩🐪🐫🐬🐭🐮🐯🐰🐱🐲🐳🐴🐵🐶🐷🐸🐹🐺🐻🐼🐽🐾🧨👀🧩👂👃👄👅👆👇👈👉👊👋👌👍👎👏👐👑👒👓👔👕👖👗👘👙👚👛👜👝👞👟👠👡👢👣👤👥👦👧👨👩👪👫👬👭👮👯👰👱👲👳👴👵👶👷👸👹👺👻👼👽👾👿💀💁💂💃💄💅💆💇💈💉💊💋💌💍💎💏💐💑💒💓💔💕💖💗💘💙💚💛💜💝💞💟💠💡💢💣💤💥💦💧💨💩💪💫💬💭💮💯💰💱💲💳💴💵💶💷💸🧪💺💻💼💽💾💿📀🧫📂📃📄🧬📆📇📈📉📊📋📌📍📎📏📐📒📓📔📕📖📗📘📙📚📛📜📝📞📟📠📡📢📣📤📥📦📧📨📩📪📫📬📭📮📯📰📱📲📳🧭📵📶📷📸📹📺📻📼🧮📿🧯🧰🧱🧲🧳🔅🔆🔇🔈🔉🔊🔋🔌🔍🔎🔏🔐🔑🔒🔓🔔🔕🔖🔗🔘🧴🧵🧶🧷🧸🧹🧺🧻🧼🧽🧾🧿🔥🔦🔧🔨🔩🔪🔫🔬🔭🔮🔯🔰🔱🔲🔳🩰🩱🩲🩳🩴🩸🩹🩺🩻🩼🪀🪁🕋🕌🕍🕎🪂🪃🪄🪅🪆🪐🪑🪒🪓🪔🪕🪖🪗🪘🪙🪚🪛🪜🪝🪞🪟🪠🪡🪢🪣🪤🪥🪦🪧🪨🪩🪪🪫🕺🪬🪰🪱🪲🪳🪴🖕🖖🖤🪵🪶🪷🪸🪹🪺🫀🫁🫂🫃🫄🫅🫐🫑🫒🫓🫔🫕🫖🫗🗻🗼🗽🗾🗿😀😁😂😃😄😅😆😇😈😉😊😋😌😍😎😏😐😑😒😓😔😕😖😗😘😙😚😛😜😝😞😟😠😡😢😣😤😥😦😧😨😩😪😫😬😭😮😯😰😱😲😳😴😵😶😷😸😹😺😻😼😽😾😿🙀🙁🙂🙃🙄🙅🙆🙇🙈🙉🙊🙌🙍🙎🙏🚀🚁🚂🚃🚄🚅🚆🚇🚈🚉🚊🚋🚌🚍🚎🚏🚐🚑🚒🚓🚔🚕🚖🚗🚘🚙🚚🚛🚜🚝🚞🚟🚠🚡🚢🚣🚤🚥🚦🚧🚨🚩🚪🚫🚬🚭🚮🚯🚰🚱🚲🚳🚴🚵🚶🚷🚸🚹🚺🚻🚼🚽🚾🚿🛀🛁🛂🛃🛄🛅🫘🛌🫙🫠🫡🛐🛑🛒🫢🫣🫤🫥🫦🫧🫰🛫🛬🫱🫲🛴🛵🛶🛷🛸🛹🤐🤑🤒🤓🤔🤕🤖🤗🤘🤙🤚🤛🤜🤝🤞🤟🤠🤡🤢🤣🤤🤥🤦🤧🤨🤩🤪🤫🤬🤭🤮🤯🤰🤱🤲🤳🤴🤵🤶🤷🤸🤹🤺🤼🤽🤾🥀🥁🥂🥃🥄🥅🥇🥈🥉🥊🥋🥌🥍🥎🥏🥐🥑🥒🥓🥔🥕🥖🥗🥘🥙🥚🥛🥜🥝🥞🥟🥠🥡🥢🥣🥤🥥🥦🥧🥨🥩🥪🥫🥬🥭🥮🥯🥰🥳🥴🥵🥶🥺🥼🥽🥾🥿🦀🦁🦂🦃🦄🦅🦆🦇🦈🦉🦊🦋🦌🦍🦎🦏🦐🦑🦒🦓🦔🦕🦖🦗🦘🦙🦚🦛🦜🦝🦞🦟🦠🦡🦢🫳🫴🫵🫶🦴🦵🦶🦷🦸🦹🧀🧁🧂🧐🧑🧒🧓🧔🧕"],this.padChars.emojis_v2=["🥷","🛼","📑","🙋","☕"],this.#o(),this.converter=new y(1024,5,4),this.padding=!0,this.padCharAmount=5,this.version="emojis_v2",this.isMutable.padding=!0,this.isMutable.trim=!0,this.trim=null,this.utils.converterArgs.trim=["notrim","trim"],this.utils.validateArgs(t,!0),null===this.trim&&(this.trim="emojis_v2"===this.version)}#o(){const t={},e=(t,e)=>{e.forEach((e=>{e in this.#r?this.#r[e].version+=t:this.#r[e]={version:t}}))},s=(e,s,i)=>{s.forEach((s=>{s in t?this.#r[s].version=3:(this.#r[s]={version:e,padding:i},t[s]=i)}))};e(1,this.charsets.emojis_v1),e(2,this.charsets.emojis_v2),s(1,this.padChars.emojis_v1.slice(0,-1),"last"),s(2,this.padChars.emojis_v2.slice(0,-1),"last"),s(1,this.padChars.emojis_v1.slice(-1),"fill"),s(2,this.padChars.emojis_v2.slice(-1),"fill");const i=[];for(const e in t)"last"===t[e]?i.push(e):i.push(`${e}+`);this.#n=new RegExp(i.join("|"),"g")}encode(t,...e){return super.encode(t,null,(({output:t,settings:e,zeroPadding:s})=>{const i=this.charsets[e.version];let r=[...t];if(s>1){const t=this.converter.padBytes(s);if(e.padding){const s=e.trim?1:t,i=new Array(s).fill(this.padChars[e.version].at(-1));r.splice(r.length-t,t,...i)}else r.splice(r.length-t,t)}else if(1===s){const t=i.indexOf(r.pop())>>8;r.push(this.padChars[e.version].at(t))}return r.join("")}),...e)}decode(t,...e){const s=this.utils.validateArgs(e);t=this.utils.normalizeInput(t);let i=s.version,r=null;"emojis_v1"!==s.version&&"emojis_v2"!==s.version||(r=3);const n=t=>{null!==r&&(r=this.#a(t,r,s.integrity),i=3===r?s.version:`emojis_v${r}`);const e=this.charsets[i],n=[...t],o=n.at(-1);let a=!1;for(let s=0;s<this.padChars[i].length-1;s++)if(o===this.padChars[i].at(s)){n.splice(-1,1,e.at(s<<8)),t=n.join(""),a=!0;break}let h=this.converter.decode(t,this.charsets[i],[],!1);return a&&(h=new Uint8Array(h.buffer.slice(0,-1))),h},o=[...t.matchAll(this.#n)];let a;if(o.length<2)a=n(t);else{const e=[];let s=0;o.forEach((i=>{const r=i.index+i.at(0).length;e.push(...n(t.slice(s,r))),s=r})),s!==t.length&&e.push(...n(t.slice(s,t.length))),a=Uint8Array.from(e)}return this.utils.outputHandler.compile(a,s.outputType)}#a(t,e,s){const i=[...t];let r;if(i.forEach(((t,i)=>{if(!(t in this.#r))throw new p(t);{const n=this.#r[t].version;if(3!==n)if(3===e)e=n;else if(e!==n)throw new TypeError(`Emojis from different ecoji versions seen : ${t} from emojis_v${n}`);if(s){const e=this.#r[t].padding;if(e){const s=i%4;if(r=!0,"fill"===e){if(0===s)throw new TypeError(`Padding unexpectedly seen in first position ${t}`)}else if(3!==s)throw new TypeError(`Last padding seen in unexpected position ${t}`)}else if(r)throw new TypeError("Unexpectedly saw non-padding after padding")}}})),s&&i.length%4&&(1===e||"fill"!==this.#r[i.at(-1)].padding))throw new TypeError("Unexpected end of data, input data size not multiple of 4");return e}}class I extends w{constructor(...t){super(),this.converter={radix:2048,bsEnc:11,bsEncPad:3,bsDec:8},this.charsets.default=[..."89ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzÆÐØÞßæðøþĐđĦħıĸŁłŊŋŒœŦŧƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏƐƑƒƓƔƕƖƗƘƙƚƛƜƝƞƟƢƣƤƥƦƧƨƩƪƫƬƭƮƱƲƳƴƵƶƷƸƹƺƻƼƽƾƿǀǁǂǃǝǤǥǶǷȜȝȠȡȢȣȤȥȴȵȶȷȸȹȺȻȼȽȾȿɀɁɂɃɄɅɆɇɈɉɊɋɌɍɎɏɐɑɒɓɔɕɖɗɘəɚɛɜɝɞɟɠɡɢɣɤɥɦɧɨɩɪɫɬɭɮɯɰɱɲɳɴɵɶɷɸɹɺɻɼɽɾɿʀʁʂʃʄʅʆʇʈʉʊʋʌʍʎʏʐʑʒʓʔʕʖʗʘʙʚʛʜʝʞʟʠʡʢʣʤʥʦʧʨʩʪʫʬʭʮʯͰͱͲͳͶͷͻͼͽͿΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρςστυφχψωϏϗϘϙϚϛϜϝϞϟϠϡϢϣϤϥϦϧϨϩϪϫϬϭϮϯϳϷϸϺϻϼϽϾϿЂЄЅІЈЉЊЋЏАБВГДЕЖЗИКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзиклмнопрстуфхцчшщъыьэюяђєѕіјљњћџѠѡѢѣѤѥѦѧѨѩѪѫѬѭѮѯѰѱѲѳѴѵѸѹѺѻѼѽѾѿҀҁҊҋҌҍҎҏҐґҒғҔҕҖҗҘҙҚқҜҝҞҟҠҡҢңҤҥҦҧҨҩҪҫҬҭҮүҰұҲҳҴҵҶҷҸҹҺһҼҽҾҿӀӃӄӅӆӇӈӉӊӋӌӍӎӏӔӕӘәӠӡӨөӶӷӺӻӼӽӾӿԀԁԂԃԄԅԆԇԈԉԊԋԌԍԎԏԐԑԒԓԔԕԖԗԘԙԚԛԜԝԞԟԠԡԢԣԤԥԦԧԨԩԪԫԬԭԮԯԱԲԳԴԵԶԷԸԹԺԻԼԽԾԿՀՁՂՃՄՅՆՇՈՉՊՋՌՍՎՏՐՑՒՓՔՕՖաբգդեզէըթժիլխծկհձղճմյնշոչպջռսվտրցւփքօֆאבגדהוזחטיךכלםמןנסעףפץצקרשתװױײؠءابةتثجحخدذرزسشصضطظعغػؼؽؾؿفقكلمنهوىي٠١٢٣٤٥٦٧٨٩ٮٯٱٲٳٴٹٺٻټٽپٿڀځڂڃڄڅچڇڈډڊڋڌڍڎڏڐڑڒړڔڕږڗژڙښڛڜڝڞڟڠڡڢڣڤڥڦڧڨکڪګڬڭڮگڰڱڲڳڴڵڶڷڸڹںڻڼڽھڿہۃۄۅۆۇۈۉۊۋیۍێۏېۑےەۮۯ۰۱۲۳۴۵۶۷۸۹ۺۻۼۿܐܒܓܔܕܖܗܘܙܚܛܜܝܞܟܠܡܢܣܤܥܦܧܨܩܪܫܬܭܮܯݍݎݏݐݑݒݓݔݕݖݗݘݙݚݛݜݝݞݟݠݡݢݣݤݥݦݧݨݩݪݫݬݭݮݯݰݱݲݳݴݵݶݷݸݹݺݻݼݽݾݿހށނރބޅކއވމފދތލގޏސޑޒޓޔޕޖޗޘޙޚޛޜޝޞޟޠޡޢޣޤޥޱ߀߁߂߃߄߅߆߇߈߉ߊߋߌߍߎߏߐߑߒߓߔߕߖߗߘߙߚߛߜߝߞߟߠߡߢߣߤߥߦߧߨߩߪࠀࠁࠂࠃࠄࠅࠆࠇࠈࠉࠊࠋࠌࠍࠎࠏࠐࠑࠒࠓࠔࠕࡀࡁࡂࡃࡄࡅࡆࡇࡈࡉࡊࡋࡌࡍࡎࡏࡐࡑࡒࡓࡔࡕࡖࡗࡘࡠࡡࡢࡣࡤࡥࡦࡧࡨࡩࡪࢠࢡࢢࢣࢤࢥࢦࢧࢨࢩࢪࢫࢬࢭࢮࢯࢰࢱࢲࢳࢴࢶࢷࢸࢹࢺࢻࢼࢽऄअआइईउऊऋऌऍऎएऐऑऒओऔकखगघङचछजझञटठडढणतथदधनपफबभमयरलळवशषसहऽॐॠॡ०१२३४५६७८९ॲॳॴॵॶॷॸॹॺॻॼॽॾॿঀঅআইঈউঊঋঌএঐওঔকখগঘঙচছজঝঞটঠডঢণতথদধনপফবভমযরলশষসহঽৎৠৡ০১২৩৪৫৬৭৮৯ৰৱ৴৵৶৷৸৹ৼਅਆਇਈਉਊਏਐਓਔਕਖਗਘਙਚਛਜਝਞਟਠਡਢਣਤਥਦਧਨਪਫਬਭਮਯਰਲਵਸਹੜ੦੧੨੩੪੫੬੭੮੯ੲੳੴઅઆઇઈઉઊઋઌઍએઐઑઓઔકખગઘઙચછજઝઞટઠડઢણતથદધનપફબભમયરલળવશષસહઽૐૠૡ૦૧૨૩૪૫૬૭૮૯ૹଅଆଇଈଉଊଋଌଏଐଓଔକଖଗଘଙଚଛଜଝଞଟଠଡଢଣତଥଦଧନପଫବଭମଯରଲଳଵଶଷସହଽୟୠୡ୦୧୨୩୪୫୬୭୮୯ୱ୲୳୴୵୶୷ஃஅஆஇஈஉஊஎஏஐஒஓகஙசஜஞடணதநனபமயரறலளழவஶஷஸஹௐ௦௧௨௩௪௫௬௭௮௯௰௱௲అఆఇఈఉఊఋఌఎఏఐఒఓఔకఖగఘఙచఛజఝఞటఠడఢణతథదధనపఫబభమయరఱలళఴవశషసహఽౘౙౚౠౡ౦౧౨౩౪౫౬౭౮౯౸౹౺౻౼౽౾ಀಅಆಇಈಉಊಋಌಎಏಐಒಓಔಕಖಗಘಙಚಛಜಝಞಟಠಡಢಣತಥದಧನಪಫಬಭಮಯರಱಲಳವಶಷಸಹಽೞೠೡ೦೧೨೩೪೫೬೭೮೯ೱೲഅആഇഈഉഊഋഌഎഏഐഒഓഔകഖഗഘങചഛജഝഞടഠഡഢണതഥദധനഩപഫബഭമയരറലളഴവശഷസഹഺഽൎൔൕൖ൘൙൚൛൜൝൞ൟൠൡ൦൧൨൩൪൫൬൭൮൯൰൱൲൳൴൵൶൷൸ൺൻർൽൾൿඅආඇඈඉඊඋඌඍඎඏඐඑඒඓඔඕඖකඛගඝඞඟචඡජඣඤඥඦටඨඩඪණඬතථදධනඳපඵබභමඹයරලවශෂසහළෆ෦෧෨෩෪෫෬෭෮෯กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะาเแโใไๅ๐๑๒๓๔๕๖๗๘๙ກຂຄງຈຊຍດຕຖທນບປຜຝພຟມຢຣລວສຫອຮຯະາຽເແໂໃໄ໐໑໒໓໔໕໖໗໘໙ໞໟༀ༠༡༢༣༤༥༦༧༨༩༪༫༬༭༮༯༰༱༲༳ཀཁགངཅཆཇཉཊཋཌཎཏཐདནཔཕབམཙཚཛཝཞཟའཡརལཤཥསཧཨཪཫཬྈྉྊྋྌကခဂဃငစဆဇဈဉညဋဌဍဎဏတထဒဓနပဖဗဘမယရလဝသဟဠအဢဣဤဥဧဨဩဪဿ၀၁၂၃၄၅၆၇၈၉ၐၑၒၓၔၕ"],this.padChars.default=[..."01234567"],this.padCharAmount=8,this.hasSignedMode=!0,this.littleEndian=!1,this.utils.validateArgs(t,!0)}encode(t,...e){const s=this.utils.validateArgs(e);let i=this.utils.inputHandler.toBytes(t,s).at(0);const r=this.charsets[s.version],n=this.padChars[s.version];let o="",a=0,h=0;if(i.forEach((t=>{for(let e=this.converter.bsDec-1;e>=0;e--)a=(a<<1)+(t>>e&1),h++,h===this.converter.bsEnc&&(o+=r.at(a),a=0,h=0)})),0!==h){let t,e;for(h<=this.converter.bsEncPad?(t=this.converter.bsEncPad,e=!0):(t=this.converter.bsEnc,e=!1);h!==t;)if(a=1+(a<<1),h++,h>this.converter.bsEnc)throw new Error("Cannot process input. This is a bug!");o+=e?n.at(a):r.at(a)}return this.utils.wrapOutput(o,s.options.lineWrap)}decode(t,...e){const s=this.utils.validateArgs(e);t=this.utils.normalizeInput(t);const i=[...t],r=this.charsets[s.version],n=this.padChars[s.version],o=new Array;let a=0,h=0;return i.forEach(((t,e)=>{let l,c=r.indexOf(t);if(c>-1)l=this.converter.bsEnc;else if(c=n.indexOf(t),c>-1){if(e+1!==i.length)throw new p(null,`Secondary character found before end of input, index: ${e}`);l=this.converter.bsEncPad}else if(s.integrity)throw new p(t);for(let t=l-1;t>=0;t--)a=(a<<1)+(c>>t&1),h++,h===this.converter.bsDec&&(o.push(a),a=0,h=0)})),this.utils.outputHandler.compile(Uint8Array.from(o),s.outputType)}}class $ extends w{constructor(t,...e){if(super(),!t||!Number.isInteger(t)||t<2||t>62)throw new RangeError("Radix argument must be provided and has to be an integer between 2 and 62.");this.converter=new y(t,0,0),this.charsets.default=[..."0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"].slice(0,t),this.frozenCharsets=!0,this.hasSignedMode=!0,this.littleEndian=!(2===t||16===t),this.signed=!0,this.version="default",this.isMutable.littleEndian=!0,this.isMutable.upper=t<=36,this.utils.validateArgs(e,!0)}encode(t,...e){return super.encode(t,null,null,...e)}decode(t,...e){return super.decode(t,(({input:t})=>{if(2===this.converter.radix){const e=(8-t.length%8)%8;t=`${"0".repeat(e)}${t}`}else if(16===this.converter.radix){const e=t.length%2;t=`${"0".repeat(e)}${t}`}return t}),null,!1,...e)}}let S=1e6,_="[big.js] ",N=_+"Invalid ",U=N+"decimal places",D=N+"rounding mode",O={},P=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;function H(t,e,s,i){let r=t.c;if(void 0===s&&(s=t.constructor.RM),0!==s&&1!==s&&2!==s&&3!==s)throw Error(D);if(e<1)i=3===s&&(i||!!r[0])||0===e&&(1===s&&r[0]>=5||2===s&&(r[0]>5||5===r[0]&&(i||void 0!==r[1]))),r.length=1,i?(t.e=t.e-e+1,r[0]=1):r[0]=t.e=0;else if(e<r.length){if(i=1===s&&r[e]>=5||2===s&&(r[e]>5||5===r[e]&&(i||void 0!==r[e+1]||1&r[e-1]))||3===s&&(i||!!r[0]),r.length=e,i)for(;++r[--e]>9;)if(r[e]=0,0===e){++t.e,r.unshift(1);break}for(e=r.length;!r[--e];)r.pop()}return t}function z(t,e,s){let i=t.e,r=t.c.join(""),n=r.length;if(e)r=r.charAt(0)+(n>1?"."+r.slice(1):"")+(i<0?"e":"e+")+i;else if(i<0){for(;++i;)r="0"+r;r="0."+r}else if(i>0)if(++i>n)for(i-=n;i--;)r+="0";else i<n&&(r=r.slice(0,i)+"."+r.slice(i));else n>1&&(r=r.charAt(0)+"."+r.slice(1));return t.s<0&&s?"-"+r:r}O.abs=function(){let t=new this.constructor(this);return t.s=1,t},O.cmp=function(t){let e,s=this,i=s.c,r=(t=new s.constructor(t)).c,n=s.s,o=t.s,a=s.e,h=t.e;if(!i[0]||!r[0])return i[0]?n:r[0]?-o:0;if(n!=o)return n;if(e=n<0,a!=h)return a>h^e?1:-1;for(o=(a=i.length)<(h=r.length)?a:h,n=-1;++n<o;)if(i[n]!=r[n])return i[n]>r[n]^e?1:-1;return a==h?0:a>h^e?1:-1},O.eq=function(t){return 0===this.cmp(t)},O.gt=function(t){return this.cmp(t)>0},O.gte=function(t){return this.cmp(t)>-1},O.lt=function(t){return this.cmp(t)<0},O.lte=function(t){return this.cmp(t)<1},O.minus=O.sub=function(t){let e,s,i,r,n=this,o=n.constructor,a=n.s,h=(t=new o(t)).s;if(a!=h)return t.s=-h,n.plus(t);let l=n.c.slice(),c=n.e,u=t.c,d=t.e;if(!l[0]||!u[0])return u[0]?t.s=-h:l[0]?t=new o(n):t.s=1,t;if(a=c-d){for((r=a<0)?(a=-a,i=l):(d=c,i=u),i.reverse(),h=a;h--;)i.push(0);i.reverse()}else for(s=((r=l.length<u.length)?l:u).length,a=h=0;h<s;h++)if(l[h]!=u[h]){r=l[h]<u[h];break}if(r&&(i=l,l=u,u=i,t.s=-t.s),(h=(s=u.length)-(e=l.length))>0)for(;h--;)l[e++]=0;for(h=e;s>a;){if(l[--s]<u[s]){for(e=s;e&&!l[--e];)l[e]=9;--l[e],l[s]+=10}l[s]-=u[s]}for(;0===l[--h];)l.pop();for(;0===l[0];)l.shift(),--d;return l[0]||(t.s=1,l=[d=0]),t.c=l,t.e=d,t},O.plus=O.add=function(t){let e,s,i,r=this,n=r.constructor;if(t=new n(t),r.s!=t.s)return t.s=-t.s,r.minus(t);let o=r.e,a=r.c,h=t.e,l=t.c;if(!a[0]||!l[0])return l[0]||(a[0]?t=new n(r):t.s=r.s),t;if(a=a.slice(),e=o-h){for(e>0?(h=o,i=l):(e=-e,i=a),i.reverse();e--;)i.push(0);i.reverse()}for(a.length-l.length<0&&(i=l,l=a,a=i),e=l.length,s=0;e;a[e]%=10)s=(a[--e]=a[e]+l[e]+s)/10|0;for(s&&(a.unshift(s),++h),e=a.length;0===a[--e];)a.pop();return t.c=a,t.e=h,t},O.round=function(t,e){if(void 0===t)t=0;else if(t!==~~t||t<-S||t>S)throw Error(U);return H(new this.constructor(this),t+this.e+1,e)},O.toFixed=function(t,e){let s=this,i=s.c[0];if(void 0!==t){if(t!==~~t||t<0||t>S)throw Error(U);for(s=H(new s.constructor(s),t+s.e+1,e),t=t+s.e+1;s.c.length<t;)s.c.push(0)}return z(s,!1,!!i)},O[Symbol.for("nodejs.util.inspect.custom")]=O.toJSON=O.toString=function(){let t=this,e=t.constructor;return z(t,t.e<=e.NE||t.e>=e.PE,!!t.c[0])},O.toNumber=function(){let t=Number(z(this,!0,!0));if(!0===this.constructor.strict&&!this.eq(t.toString()))throw Error(_+"Imprecise conversion");return t};const V=function t(){function e(s){let i=this;if(!(i instanceof e))return void 0===s?t():new e(s);if(s instanceof e)i.s=s.s,i.e=s.e,i.c=s.c.slice();else{if("string"!=typeof s){if(!0===e.strict&&"bigint"!=typeof s)throw TypeError(N+"value");s=0===s&&1/s<0?"-0":String(s)}!function(t,e){let s,i,r;if(!P.test(e))throw Error(`${N}number`);for(t.s="-"==e.charAt(0)?(e=e.slice(1),-1):1,(s=e.indexOf("."))>-1&&(e=e.replace(".","")),(i=e.search(/e/i))>0?(s<0&&(s=i),s+=+e.slice(i+1),e=e.substring(0,i)):s<0&&(s=e.length),r=e.length,i=0;i<r&&"0"==e.charAt(i);)++i;if(i==r)t.c=[t.e=0];else{for(;r>0&&"0"==e.charAt(--r););for(t.e=s-i-1,t.c=[],s=0;i<=r;)t.c[s++]=+e.charAt(i++)}}(i,s)}i.constructor=e}return e.prototype=O,e.DP=20,e.RM=1,e.NE=-7,e.PE=21,e.strict=false,e.roundDown=0,e.roundHalfUp=1,e.roundHalfEven=2,e.roundUp=3,e}();class L extends w{#h=V("1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752");constructor(...t){super(),this.converter={radix:2,bsEnc:0,bsDec:0},this.b10=new y(10,0,0),this.charsets.default=["0","1"],this.version="default",this.signed=!0,this.hasDecimalMode=!0,this.utils.validateArgs(t,!0)}encode(t,...e){const s=this.utils.validateArgs(e),i=this.charsets[s.version];let r,n,o,a="";if(s.decimalMode){if(!Number.isFinite(t))throw new TypeError("When running the converter in decimal-mode, only input of type 'Number' is allowed.");t<0?(n=!0,o=V(-t)):(n=!1,o=V(t))}else[r,n]=this.utils.inputHandler.toBytes(t,s),o=V(this.b10.encode(r,null,s.littleEndian)[0]);if(o.eq(0)||o.eq(1))return a=i[o.toNumber()],n&&(a=`-${a}`),a;const h=[],l=[];let c=V(1),u=this.#h,d=0;for(;u.lt(o);)[c,u]=this.#l(c,u),d++;const f=(t,e,s)=>{if(!this.#c(o)){for(;t.gt(o);){if([t,e]=this.#u(t,e),t.lte(0))return void console.warn("Could not find an exact base-phi representation. Value is approximated.");s--}s>-1?h.unshift(s):l.push(s),o=o.minus(t),f(t,e,s)}};return f(c,u,d),d=0,h.forEach((t=>{for(;d<t;)a=`${i[0]}${a}`,d++;a=`${i[1]}${a}`,d++})),a?a+=".":a="0.",d=-1,l.forEach((t=>{for(;d>t;)a+=i[0],d--;a+=i[1],d--})),n&&(a=`-${a}`),a}decode(t,...e){const s=this.utils.validateArgs(e),i=this.charsets[s.version];let r;if([t,r]=this.utils.extractSign(this.utils.normalizeInput(t)),!s.integrity){const e=[...i,"."];t=[...t].filter((t=>e.includes(t))).join("")}const n=t.split(".");if(s.integrity&&n.length>2)throw new p(null,"There are multiple decimal points in the input.");const[o,a]=n;let h=V(0),l=this.#h.minus(1),c=V(1);if([...o].reverse().forEach((t=>{const e=i.indexOf(t);if(1===e)h=h.plus(c);else if(0!==e)throw new p(t);[l,c]=this.#l(l,c)})),a){let t=V(1);c=this.#h.minus(t),[...a].forEach((e=>{const s=i.indexOf(e);if(1===s)h=h.plus(c);else if(0!==s)throw new p(e);[c,t]=this.#u(c,t)}))}if(s.decimalMode)return h.toNumber();h=h.round().toFixed();const u=this.b10.decode(h,[..."0123456789"],[],s.integrity,s.littleEndian);return this.utils.outputHandler.compile(u,s.outputType,s.littleEndian,r)}#c(t){return!t.round(50).abs().toNumber()}#l(t,e){return[e,t.plus(e)]}#u(t,e){return[e.minus(t),t]}}const F=(()=>{const t=new Uint16Array([1]),e=new Uint8Array(t.buffer);return Boolean(e.at(0))})();class K{constructor(...t){this.littleEndian=F,this.numberMode=!1,this.outputType="buffer",this.utils={validateArgs:(t,e=!1)=>{const s={littleEndian:this.littleEndian,numberMode:this.numberMode,outputType:this.outputType,signed:!1};if(!t.length)return s;t.includes("number")&&(t.splice(t.indexOf("number"),1),s.numberMode=!0,s.outputType="float_n");const i=c.typeList.map((t=>`'${t}'`)).join(", ");if(t.forEach((t=>{if("le"===(t=String(t).toLowerCase()))s.littleEndian=!0;else if("be"===t)s.littleEndian=!1;else{if(!c.typeList.includes(t))throw new TypeError(`Invalid argument: '${t}.\nValid arguments are:\n'le', 'be', ${i}`);s.outputType=t}})),e)for(const t in s)this[t]=s[t];return s}},this.utils.validateArgs(t,!0)}encode(t,...e){const s=this.utils.validateArgs(e);return l.toBytes(t,s)[0]}decode(t,...e){const s=this.utils.validateArgs(e);return c.compile(t,s.outputType,s.littleEndian)}}
/**
     * [BaseEx]{@link https://github.com/UmamiAppearance/BaseExJS}
     *
     * @version 0.7.1
     * @author UmamiAppearance [mail@umamiappearance.eu]
     * @license MIT
     */class R{constructor(t="buffer"){if(!d.typeList.includes(t)){let e=`Invalid argument '${t}' for output type. Allowed types are:\n`;throw e=e.concat(d.typeList.join(", ")),new TypeError(e)}this.base1=new b("default",t),this.base16=new m("default",t),this.base32_crockford=new v("rfc4648",t),this.base32_rfc3548=new v("rfc3548",t),this.base32_rfc4648=new v("rfc4648",t),this.base32_zbase32=new v("zbase32",t),this.base58=new E("default",t),this.base58_bitcoin=new E("bitcoin",t),this.base58_flickr=new E("flickr",t),this.base64=new A("default",t),this.base64_urlsafe=new A("urlsafe",t),this.uuencode=new x("default",t),this.xxencode=new x("xx",t),this.base85_adobe=new M("adobe",t),this.base85_ascii=new M("ascii85",t),this.base85_z85=new M("z85",t),this.base91=new C("default",t),this.leb128=new j("default",t),this.ecoji_v1=new B("emojis_v1",t),this.ecoji_v2=new B("emojis_v2",t),this.base2048=new I("default",t),this.basePhi=new L("default",t),this.byteConverter=new K(t),this.simpleBase={};for(let e=2;e<=62;e++)this.simpleBase[`base${e}`]=new $(e,t)}}
/**
     * [HMACObj]{@link https://github.com/UmamiAppearance/HMACObj}
     *
     * @version 1.0.0
     * @author UmamiAppearance [mail@umamiappearance.eu]
     * @license MIT
     */let q;if(void 0===R)throw new Error("BaseEx is required for this module to work. Please make sure the whole library or the BaseEx class can be globally found under the name 'BaseEx'.");q="BaseEx"in R?new R.BaseEx:new R;const W=["SHA-1","SHA-256","SHA-384","SHA-512"],G=["raw","jwk"];return class{#d=null;#f=null;#p=null;#g=[];#y=null;#w=this.constructor.keyFormats();#b=null;constructor(t){[this.#p,this.#d]=o(t,W),this.#m()}static baseEx=q;static digestmodsAvailable(){return new Set(W)}static keyFormats(){return new Set(G)}static async generateKey(t="",e=!1){return t=o(t,W).at(0),await s(t,e)}static compareDigest(t,e){if(void 0===t||void 0===e)throw new Error("HMACobj.compareDigest takes exactly two positional arguments.");let s,i;t=q.byteConverter.encode(t,"uint8"),e=q.byteConverter.encode(e,"uint8"),t.byteLength>e.byteLength?(s=t,i=e):(s=e,i=t);const r=s.map(((t,e)=>t===i.at(e)));return Boolean(r.reduce(((t,e)=>t*e)))}static async new(t=null,e=null,s="",i="raw",r=!1){const n=new this(s);return t&&("object"===i?await n.setKey(t):await n.importKey(t,i,r)),null!==e&&(t||(await n.generateKey(),console.warn("A message but no key was provided. The key was generated for you.")),await n.update(e)),n}get digestSize(){return this.#d/8}get blockSize(){return this.#d>256?128:64}get name(){return"HMAC-"+this.#p}#v(t){return q.byteConverter.encode(t,"bytes")}#E(t){if(!this.#w.has(t))throw new TypeError(`Invalid key format '${t}'\n\nValid formats are: ${G.join(", ")}`)}#A(){if(null===this.#y)throw new Error("No key is assigned yet. Import or generate key.")}#x(t,e){const s="Invalid base conversion keyword.";var i;if(i=e.replace(/^to/,""),"hex"===(e=i.charAt(0).toLowerCase().concat(i.slice(1)))||"hexdigest"==e)e="base16";else if("bytes"===e)e="byteConverter";else if(/SimpleBase/i.test(e)){if(!((e="base"+(0|[].concat(String(e).match(/[0-9]+/)).at(0)))in q.simpleBase))throw new TypeError(s);return q.simpleBase[e].encode(t)}if(!(e in q))throw new TypeError(s);return q[e].encode(t)}async update(t,e=!1){t=this.#v(t),this.#A(),this.#g=e?Array.from(t):this.#g.concat(Array.from(t)),this.#f=await r(Uint8Array.from(this.#g),this.#y)}async replace(t){await this.update(t,!0)}async setKey(t){this.#y=t,this.#g.length&&(console.warn("A new crypto key was established. A fresh digest is now getting calculated."),this.#f=await r(Uint8Array.from(this.#g),this.#y))}async importKey(t,s="raw",i=!1){"raw"===s?t=this.#v(t):this.#E(s),this.#b=i;const r=await e(t,this.#p,s,i);await this.setKey(r)}async generateKey(t=!0){this.#b=Boolean(t);const e=await s(this.#p,this.#b);await this.setKey(e)}async exportKey(e="raw"){if(this.#E(e),null===this.#y)throw new Error("Key is unset.");if(!this.#b)throw new t("Key exports are not allowed. You have to permit this before key-generation.");return await i(this.#y,e)}async copy(){return await this.constructor.new(this.#y,this.#g.length?Uint8Array.from(this.#g):null,this.#p,"object",this.#b)}async sign(t,e=null){this.#A(),t=this.#v(t);const s=await r(t,this.#y);return null!==e?this.#x(s,e):s}async verify(t,e){if(t=this.#v(t),this.#A(),null===this.signature)throw new TypeError("Signature must be provided");return await n(t,e,this.#y)}digest(){return this.#f}#m(){const t=(t,e)=>t.splice(t.indexOf(e),1),e=t=>t.charAt(0).toUpperCase().concat(t.slice(1));this.hexdigest=()=>this.#f?q.base16.encode(this.#f):null;const s=Object.keys(q);this.basedigest={toSimpleBase:{}},t(s,"base1"),t(s,"byteConverter"),t(s,"simpleBase");for(const t of s)this.basedigest[`to${e(t)}`]=(...e)=>this.#f?q[t].encode(this.#f,...e):null;for(const t in q.simpleBase)this.basedigest.toSimpleBase[e(t)]=(...e)=>this.#f?q.simpleBase[t].encode(this.#f,...e):null;this.basedigest.toBytes=(...t)=>this.#f?q.byteConverter.encode(this.#f,...t):null}}}();
